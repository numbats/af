{
  "hash": "ab1169a971fb77713a33d220a048535c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Activities: Week 10\"\nexecute:\n  echo: true\n  output: false\n  eval: false\n---\n\n## Australian tobacco expenditure\n\nIn this exercise, we will compare an ETS model, an ARIMA model and an STL+ARIMA model fitted to Australian tobacco expenditure data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fpp3)\ntobacco <- aus_tobacco |>\n  summarise(Expenditure = sum(Expenditure))\ntobacco |> autoplot(Expenditure)\n```\n:::\n\n\n\n1.  First we will find an appropriate STL decomposition for this data set.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    tobacco |>\n      model(\n        stl = STL(log(Expenditure) ~ season(window = ???) + trend(window = ???))\n      ) |>\n      components() |>\n      autoplot()\n    ```\n    :::\n\n\n2.  Now fit an ETS, ARIMA and STL+ARIMA model with the same window values. For the ARIMA and STL+ARIMA models, use a log transformation.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    fit <- tobacco |>\n      model(\n        ets = ETS(Expenditure),\n        arima = ARIMA(log(Expenditure)),\n        stl_arima = decomposition_model(\n          STL(log(Expenditure) ~ season(window = ???) + trend(window = ???)),\n          ARIMA(season_adjust),\n          SNAIVE(season_year)\n        )\n      )\n    ```\n    :::\n\n\n3.  Write down the equations for each model.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    fit |> select(ets) |> report()\n    fit |> select(arima) |> report()\n    fit |> select(stl_arima) |> report()\n    ```\n    :::\n\n\n4.  Check if the residuals from each model look like white noise\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    fit |> select(ets) |> gg_tsresiduals()\n    fit |> select(arima) |> gg_tsresiduals()\n    fit |> select(stl_arima) |> gg_tsresiduals()\n    ```\n    :::\n\n\n5.  Which model fits the data best?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    fit |> accuracy()\n    ```\n    :::\n\n\n6.  Do the forecasts look similar?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    fit |>\n      forecast(h = 24) |>\n      autoplot(tobacco |> filter(year(Quarter) >= 2010), level = 80, alpha = 0.5)\n    ```\n    :::\n\n\n\n7.  Find the one-step median forecast and compute the 95% prediction interval from first principles.  Check that you get the same result as obtained with the following code.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    fit |>\n      select(arima) |>\n      forecast(h = 1) |>\n      mutate(\n        .median = median(Expenditure),\n        PI = hilo(Expenditure, level = 95)\n      )\n    fit |> select(arima) |> report()\n    ```\n    :::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}