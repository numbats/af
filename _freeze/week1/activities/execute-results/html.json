{
  "hash": "d935da4e4f9e2b138fc072ba506fd370",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Activities: Week 1\"\neditor: source\nengine: knitr\nfilters:\n  - live\n  - quiz-teachr\nojs-engine: true\nwebr:\n  packages:\n    - qlcheckr\n    - fpp3\n    - urca\n  autoload-packages: false\n  repos:\n    - https://repo.r-wasm.org/\n    - https://learnr-academy.github.io/qlcheckr\n---\n\n\n::: {.cell}\n\n:::\n\n\n\n# Time series data and patterns\n\n\n::: {.cell}\n\n:::\n\n\n## Exercise 1\n\nThe `pedestrian` dataset contains hourly pedestrian counts from 2015-01-01 to 2016-12-31 at 4 sensors in the city of Melbourne.\n\nThe data is shown below:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 66,037 × 5\n   Sensor         Date_Time           Date        Time Count\n   <chr>          <dttm>              <date>     <int> <int>\n 1 Birrarung Marr 2015-01-01 00:00:00 2015-01-01     0  1630\n 2 Birrarung Marr 2015-01-01 01:00:00 2015-01-01     1   826\n 3 Birrarung Marr 2015-01-01 02:00:00 2015-01-01     2   567\n 4 Birrarung Marr 2015-01-01 03:00:00 2015-01-01     3   264\n 5 Birrarung Marr 2015-01-01 04:00:00 2015-01-01     4   139\n 6 Birrarung Marr 2015-01-01 05:00:00 2015-01-01     5    77\n 7 Birrarung Marr 2015-01-01 06:00:00 2015-01-01     6    44\n 8 Birrarung Marr 2015-01-01 07:00:00 2015-01-01     7    56\n 9 Birrarung Marr 2015-01-01 08:00:00 2015-01-01     8   113\n10 Birrarung Marr 2015-01-01 09:00:00 2015-01-01     9   166\n# ℹ 66,027 more rows\n```\n\n\n:::\n:::\n\n\n::: {.callout-caution}\n## Your turn!\n\nIdentify the `index` variable, `key` variable(s), and measured variable(s) of this dataset.\n:::\n\n::: {.callout-tip}\n## Hint\n\n* The `index` variable contains the complete time information\n* The `key` variable(s) identify each time series\n* The measured variable(s) are what you want to explore/forecast.\n:::\n\n::: columns\n\n::: {.column width=\"30%\"}\n\n## `index` variable\n:::{.quiz-singlechoice}\n- [ ] [Sensor]{hint=\"x\"}\n- [X] [Date_Time]{hint=\"o\"}\n- [ ] [Date]{hint=\"x\"}\n- [ ] [Time]{hint=\"x\"}\n- [ ] [Count]{hint=\"x\"}\n:::\n:::\n\n::: {.column width=\"30%\"}\n\n## `key` variable(s)\n:::{.quiz-multichoice}\n- [X] [Sensor]{hint=\"o\"}\n- [ ] [Date_Time]{hint=\"x\"}\n- [ ] [Date]{hint=\"x\"}\n- [ ] [Time]{hint=\"x\"}\n- [ ] [Count]{hint=\"x\"}\n:::\n:::\n\n::: {.column width=\"40%\"}\n\n## measured variable(s)\n:::{.quiz-multichoice}\n- [ ] [Sensor]{hint=\"x\"}\n- [ ] [Date_Time]{hint=\"x\"}\n- [ ] [Date]{hint=\"x\"}\n- [ ] [Time]{hint=\"x\"}\n- [X] [Count]{hint=\"o\"}\n:::\n:::\n:::\n\n## Exercise 2\n\nThe `aus_accommodation` dataset contains quarterly data on Australian tourist accommodation from short-term non-residential accommodation with 15 or more rooms, 1998 Q1 - 2016 Q2. The first few lines are shown below.\n\n![](figs/spreadsheet.png)\n\nThe units of the measured variables are as follows:\n\n* Takings are in millions of Australian dollars\n* Occupancy is a percentage of rooms occupied\n* CPI is an index with value 100 in 2012 Q1.\n\n::: {.callout-caution}\n## Your turn!\n\nComplete the code to convert this dataset into a tsibble.\n:::\n\n\n::: {.cell exercise='make_tsibble'}\n```{webr}\n#| exercise: make_tsibble\nlibrary(______)\n\naus_accommodation <- read.csv(\n  \"https://workshop.nectric.com.au/user2024/data/aus_accommodation.csv\"\n) |>\n  mutate(Date = as.Date(Date)) |>\n  as_tsibble(\n    ______\n  )\naus_accommodation\n```\n:::\n\n\n\n::: {.cell exercise='make_tsibble' check='true'}\n```{webr}\n#| exercise: make_tsibble\n#| check: true\nlibrary(qlcheckr)\n\napply_checks(\n  c(\n    \"You need to load the fpp3 package!\" = !(\"fpp3\" %in% .packages()),\n    \"You need to use the as_tsibble() function to convert the data into a tsibble.\" = !search_ast(ql_ast(), .fn = as_tsibble),\n    \"You should specify which column provides the time of the measurements with `index`.\" = exists_in(ql_messages(), grepl, pattern = \"as index variable\", fixed = TRUE),\n    \"You need to specify the key variables that identify each time series\" = exists_in(ql_errors(), grepl, pattern = \"distinct rows\", fixed = TRUE)\n  ),\n  .msg_correct = if (!exists_in(ql_results(), \\(x) is_tsibble(x) && is_yearquarter(x[[index_var(x)]]))) \"Great, you've got a tsibble!<br>Although something doesn't look right - check the frequency of the data, why isn't it quarterly?\" else \"That's correct! Well done.\"\n)\n```\n:::\n\n\n::: { .hint exercise=\"make_tsibble\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n\nBegin by loading the `fpp3` library to use its time series functions.\n\n```r\nlibrary(fpp3)\n```\n:::\n:::\n\n::: { .hint exercise=\"make_tsibble\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n\nAfter loading the `fpp3` package, convert the data frame into a tsibble.\n\n```r\nlibrary(fpp3)\naus_accommodation <- read.csv(\n  \"https://workshop.nectric.com.au/user2024/data/aus_accommodation.csv\"\n) |> mutate(Date = as.Date(Date))\n```\n:::\n:::\n\n::: { .hint exercise=\"make_tsibble\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n\nRemember to specify the time index and key for `as_tsibble()` to function correctly.\n\n```r\nlibrary(fpp3)\naus_accommodation <- read.csv(\n  \"https://workshop.nectric.com.au/user2024/data/aus_accommodation.csv\"\n) |>\n  mutate(Date = as.Date(Date)) |>\n  as_tsibble(key = State, index = Date)\n```\n:::\n:::\n\n## Exercise 3\n\n:::{.callout-important}\n## Temporal granularity\n\nThe previous exercise produced a dataset with daily frequency - although clearly the data is quarterly! This is because we are using a daily granularity which is inappropriate for this data.\n:::\n\nCommon temporal granularities can be created with these functions:\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Granularity |Function             |\n|:-----------|:--------------------|\n|Annual      |`as.integer()`       |\n|Quarterly   |`yearquarter()`      |\n|Monthly     |`yearmonth()`        |\n|Weekly      |`yearweek()`         |\n|Daily       |`as_date()`, `ymd()` |\n|Sub-daily   |`as_datetime()`      |\n\n\n:::\n:::\n\n\n\n::: {.callout-caution}\n## Your turn!\n\nUse the appropriate granularity for the `aus_accommodation` dataset, and verify that the frequency is now quarterly.\n:::\n\n\n\n::: {.cell exercise='process_accommodation_data'}\n```{webr}\n#| exercise: process_accommodation_data\naus_accommodation <- read.csv(\n  \"https://workshop.nectric.com.au/user2024/data/aus_accommodation.csv\"\n) |>\n  mutate(______) |>\n  as_tsibble(\n    key = State, index = ______\n  )\n```\n:::\n\n\n\n::: {.cell exercise='process_accommodation_data' check='true'}\n```{webr}\n#| exercise: process_accommodation_data\n#| check: true\nlibrary(qlcheckr)\napply_checks(\n  c(\n    \"You need to load the fpp3 package!\" = !(\"fpp3\" %in% .packages()),\n    \"You need to save the dataset as `aus_accommodation`\" = !exists(\"aus_accommodation\"),\n    \"You need to use the as_tsibble() function to convert the data into a tsibble.\" = !search_ast(ql_ast(), .fn = as_tsibble),\n    \"You need to specify the key variables that identify each time series\" = exists_in(ql_errors(), grepl, pattern = \"distinct rows\", fixed = TRUE),\n    \"You should use `yearquarter()` to change the time column into a quarterly granularity\" = !is_yearquarter(aus_accommodation[[index_var(aus_accommodation)]])\n  )\n)\n```\n:::\n\n\n::: { .hint exercise=\"process_accommodation_data\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n\nStart by reading the CSV file and transform the data using `mutate()` and `yearquarter()` for the Date column.\n\n```r\naus_accommodation <- read.csv(\n  \"https://workshop.nectric.com.au/user2024/data/aus_accommodation.csv\"\n) |>\n  mutate(Quarter = yearquarter(Date))\n```\n:::\n:::\n\n::: { .hint exercise=\"process_accommodation_data\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n\nAfter transforming the Date column, make sure you convert the data frame to a tsibble.\n\n```r\naus_accommodation <- read.csv(\n  \"https://workshop.nectric.com.au/user2024/data/aus_accommodation.csv\"\n) |>\n  mutate(Quarter = yearquarter(Date)) |>\n  as_tsibble(key = State, index = Quarter)\n```\n:::\n:::\n\n## Exercise 4\n\nThe `tourism` dataset contains the quarterly overnight trips from 1998 Q1 to 2016 Q4 across Australia.\n\nIt is disaggregated by 3 key variables:\n\n* `State`: States and territories of Australia\n* `Region`: The tourism regions are formed through the aggregation of Statistical Local Areas (SLAs) which are defined by the various State and Territory tourism authorities according to their research and marketing needs\n* `Purpose`: Stopover purpose of visit: \"Holiday\", \"Visiting friends and relatives\", \"Business\", \"Other reason\".\n\nBelow is a preview:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 24,320 x 5 [1Q]\n# Key:       Region, State, Purpose [304]\n   Quarter Region   State           Purpose  Trips\n     <qtr> <chr>    <chr>           <chr>    <dbl>\n 1 1998 Q1 Adelaide South Australia Business  135.\n 2 1998 Q2 Adelaide South Australia Business  110.\n 3 1998 Q3 Adelaide South Australia Business  166.\n 4 1998 Q4 Adelaide South Australia Business  127.\n 5 1999 Q1 Adelaide South Australia Business  137.\n 6 1999 Q2 Adelaide South Australia Business  200.\n 7 1999 Q3 Adelaide South Australia Business  169.\n 8 1999 Q4 Adelaide South Australia Business  134.\n 9 2000 Q1 Adelaide South Australia Business  154.\n10 2000 Q2 Adelaide South Australia Business  169.\n# ℹ 24,310 more rows\n```\n\n\n:::\n:::\n\n\nCalculate the total quarterly tourists visiting Victoria from the `tourism` dataset.\n\n\n::: {.cell exercise='filter_summarise_tourism'}\n```{webr}\n#| exercise: filter_summarise_tourism\ntourism |>\n  filter(______) |>\n  summarise(______)\n```\n:::\n\n\n\n::: {.cell exercise='filter_summarise_tourism' check='true'}\n```{webr}\n#| exercise: filter_summarise_tourism\n#| check: true\nlibrary(qlcheckr)\napply_checks(\n  c(\n    \"You need to load the fpp3 package!\" = !(\"fpp3\" %in% .packages()),\n    \"You need to use the filter() function to extract only Victorian tourists.\" = !search_ast(ql_ast(), .fn = filter),\n    \"You need to use the summarise() function to sum over the Region and Purpose keys.\" = !search_ast(ql_ast(), .fn = summarise)\n  )\n)\n```\n:::\n\n\n::: { .hint exercise=\"filter_summarise_tourism\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n\nTo start off, filter the `tourism` dataset for only Victoria.\n\n```r\ntourism |>\n  filter(State == \"Victoria\")\n```\n:::\n:::\n\n::: { .hint exercise=\"filter_summarise_tourism\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n\nAfter filtering, summarise the total trips for Victoria.\n\n```r\ntourism |>\n  filter(State == \"Victoria\") |>\n  summarise(Trips = sum(Trips))\n```\n:::\n:::\n\n## Exercise 5\n\nFind what combination of `Region` and `Purpose` had the maximum number of overnight trips on average.\n\n\n::: {.cell exercise='group_summarise_filter_tourism'}\n```{webr}\n#| exercise: group_summarise_filter_tourism\ntourism |>\n  as_tibble() |>\n  group_by(______) |>\n  summarise(______) |>\n  filter(______)\n```\n:::\n\n\n\n::: {.cell exercise='group_summarise_filter_tourism' check='true'}\n```{webr}\n#| exercise: group_summarise_filter_tourism\n#| check: true\nlibrary(qlcheckr)\napply_checks(\n  c(\n    \"You need to load the fpp3 package!\" = !(\"fpp3\" %in% .packages()),\n    \"You need to use the as_tibble() function to convert back to a tibble object.\" = !search_ast(ql_ast(), .fn = as_tibble),\n    \"You need to use the group_by() function to group by Region and Purpose.\" = !search_ast(ql_ast(), .fn = group_by)\n  )\n)\n```\n:::\n\n\n::: { .hint exercise=\"group_summarise_filter_tourism\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n\nStart by using `as_tibble()` to convert `tourism` back to a tibble and group it by Region and Purpose.\n\n```r\ntourism |>\n  as_tibble() |>\n  group_by(Region, Purpose)\n```\n:::\n:::\n\n::: { .hint exercise=\"group_summarise_filter_tourism\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n\nAfter grouping, summarise the mean number of trips and filter for maximum trips.\n\n```r\ntourism |>\n  as_tibble() |>\n  group_by(Region, Purpose) |>\n  summarise(Trips = mean(Trips), .groups = \"drop\") |>\n  filter(Trips == max(Trips))\n```\n:::\n:::\n\n## Exercise 6\n\nCreate a new tsibble which combines the Purposes and Regions, and just has total trips by State.\n\n\n::: {.cell exercise='summarise_tourism_by_state'}\n```{webr}\n#| exercise: summarise_tourism_by_state\ntourism |>\n  group_by(______) |>\n  summarise(______)\n```\n:::\n\n\n\n::: {.cell exercise='summarise_tourism_by_state' check='true'}\n```{webr}\n#| exercise: summarise_tourism_by_state\n#| check: true\nlibrary(qlcheckr)\napply_checks(\n  c(\n    \"You need to group by the State to summarise trips for each state.\" = !search_ast(ql_ast(), .expr = group_by(State)),\n    \"You need to use the summarise() function to sum trips for each state.\" = !search_ast(ql_ast(), .expr = summarise(Trips = sum(Trips)))\n  )\n)\n```\n:::\n\n\n::: { .hint exercise=\"summarise_tourism_by_state\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n\nTo summarise the number of trips by each State, start by grouping the data by State.\n\n```r\ntourism |>\n  group_by(State)\n```\n:::\n:::\n\n::: { .hint exercise=\"summarise_tourism_by_state\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n\nAfter grouping, use the `summarise()` function to sum the trips.\n\n```r\ntourism |>\n  group_by(State) |>\n  summarise(Trips = sum(Trips))\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}