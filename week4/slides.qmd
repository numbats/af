---
title: ETC3550/ETC5550 Applied forecasting
author: "Week 4: Simple forecasting methods"
format:
  presentation-beamer:
    knitr:
      opts_chunk:
        dev: "cairo_pdf"
    pdf-engine: pdflatex
    fig-width: 7.5
    fig-height: 3.5
    include-in-header: ../header.tex
    keep_tex: true
    toc: true
---

```{r setup, include=FALSE}
source(here::here("setup.R"))
source(here::here("course_info.R"))
set.seed(3550)
options(width = 100)
```

# Four benchmark methods

## Mean method

`MEAN(y)` 

  * Forecast of all future values is equal to mean of historical data $\{y_1,\dots,y_T\}$.
  * Forecasts: $\hat{y}_{T+h|T} = \bar{y} = (y_1+\dots+y_T)/T$
  * Implicit model: $y_t = c + \varepsilon_t$ where $\varepsilon_t \sim WN$.

## Mean method

```{r mean-method-explained, echo=FALSE, message=FALSE, warning=FALSE}
bricks <- aus_production |>
  filter(!is.na(Bricks)) |>
  mutate(average = mean(Bricks))

fc <- bricks |>
  filter(row_number() == n()) |>
  as_tibble() |>
  unnest(Quarter = list(as.Date(Quarter) + months(c(0, 12 * 5))))

bricks |>
  ggplot(aes(x = Quarter, y = Bricks)) +
  geom_line() +
  geom_line(aes(y = average), colour = "#0072B2", linetype = "dashed") +
  geom_line(aes(y = average), data = fc, colour = "#0072B2") +
  labs(title = "Clay brick production in Australia")
```

\vspace*{10cm}

## Naïve method

`NAIVE(y)`

  * Forecasts equal to last observed value.
  * Forecasts: $\hat{y}_{T+h|T} =y_T$.
  * Implicit model is a random walk: $y_t = y_{t-1} + \varepsilon_t$
  * Consequence of efficient market hypothesis.

## Naïve method

```{r naive-method-explained, echo = FALSE, warning = FALSE}
bricks |>
  filter(!is.na(Bricks)) |>
  model(NAIVE(Bricks)) |>
  forecast(h = "5 years") |>
  autoplot(filter(bricks, year(Quarter) > 1990), level = NULL) +
  geom_point(data = slice(bricks, n()), aes(y = Bricks), colour = "#0072B2") +
  labs(title = "Clay brick production in Australia")
```

\vspace*{10cm}

## Seasonal Naïve method

`SNAIVE(y ~ lag(m))`

  * Forecasts equal to last value from same season.
  * Forecasts: $\hat{y}_{T+h|T} =y_{T+h-m(k+1)}$, where $m=$ seasonal period and $k$ is the integer part of $(h-1)/m$.
  * Implicit model: $y_t = y_{t-m} + \varepsilon_t$

## Seasonal Naïve method

```{r snaive-method-explained, echo = FALSE, warning = FALSE}
bricks |>
  model(SNAIVE(Bricks ~ lag("year"))) |>
  forecast(h = "5 years") |>
  autoplot(filter(bricks, year(Quarter) > 1990), level = NULL) +
  geom_point(
    data = slice(bricks, (n() - 3):n()),
    aes(y = Bricks),
    colour = "#0072B2"
  ) +
  labs(title = "Clay brick production in Australia")
```

## Drift method

`RW(y ~ drift())`

 * Forecasts equal to last value plus average change:

  \vspace*{-1cm}
  \begin{align*}
    \hat{y}_{T+h|T} & =  y_{T} + \frac{h}{T-1}\sum_{t=2}^T (y_t-y_{t-1})\\
                    & = y_T + \frac{h}{T-1}(y_T -y_1).
  \end{align*}
 
  \vspace*{-0.6cm}

   * Equivalent to extrapolating a line drawn between first and last observations.
   * Implicit model: Random walk with drift: $y_t = c + y_{t-1} + \varepsilon_t$

## Drift method

```{r drift-method-explained, echo = FALSE, warning = FALSE}
aus_production |>
  filter(!is.na(Bricks)) |>
  model(RW(Bricks ~ drift())) |>
  forecast(h = "5 years") |>
  autoplot(aus_production, level = NULL) +
  geom_line(
    data = slice(aus_production, range(cumsum(!is.na(Bricks)))),
    aes(y = Bricks),
    linetype = "dashed",
    colour = "#0072B2"
  ) +
  labs(title = "Clay brick production in Australia")
```

\vspace*{10cm}


# Time trends and dummy seasonality

## Linear time trends

\begin{block}{}
\centerline{$y_t = \beta_0 + \beta_1 x_{1,t} + \varepsilon_t$}
\end{block}

`TSLM(y ~ trend())`

  * $x_{1,t} = t$, \qquad $t = 1,\dots,T$

  * Forecasts: $\hat{y}_{T+h|T} = \beta_0 + \beta_1(T+h)$

## Piecewise linear time trends

\begin{block}{}
\centerline{$y_t = \beta_0 + \beta_1 x_{1,t} + \dots + \beta_k x_{k,t} + \varepsilon_t$}
\end{block}

`TSLM(y ~ trend(knots = c(tau1, tau2, ..., taup)))`

  * Bends at $\tau_1,\dots,\tau_p$

  * $x_{1,t} = t$

  * $x_{i,t} = (t-\tau_i)_+ = \left\{ 
    \begin{array}{ll}
      0 & t <\tau_i\\
      (t-\tau_i) & t \ge \tau_i
    \end{array}\right.$

  * Forecasts: $\beta_0 + \beta_1 (T+h) + \beta_{2}(T+h-\tau_1)_+ + \dots + \beta_{p+1} (T+h-\tau_p)_+$

## Quadratic time trends

\begin{block}{}
\centerline{$y_t = \beta_0 + \beta_1 x_{1,t} + \beta_2 x_{2,t} + \varepsilon_t$}
\end{block}

  * $x_{1,t} = t$

  * $x_{2,t} = t^2$

  * Forecasts: $\beta_0 + \beta_1 (T+h) + \beta_2 (T+h)^2$

**NOT RECOMMENDED!**

## Daily dummy variables

\begin{textblock}{7}(8,1.4)
\begin{block}{}\small\centering
\begin{tabular}{lrrrr}
\toprule
Day & d1 & d2 & d3 & d4 \\
\midrule
Monday     & 1  & 0  & 0  & 0 \\
Tuesday    & 0  & 1  & 0  & 0 \\
Wednesday  & 0  & 0  & 1  & 0 \\
Thursday   & 0  & 0  & 0  & 1 \\
Friday     & 0  & 0  & 0  & 0 \\
Monday     & 1  & 0  & 0  & 0 \\
Tuesday    & 0  & 1  & 0  & 0 \\
Wednesday  & 0  & 0  & 1  & 0 \\
Thursday   & 0  & 0  & 0  & 1 \\
Friday     & 0  & 0  & 0  & 0 \\
\bottomrule
\end{tabular}
\end{block}
\end{textblock}

\begin{textblock}{6}(0.4,1.5)
\texttt{TSLM(y\ \textasciitilde{}\ season())} 
\fontsize{13}{15}\sf
\begin{itemize}\tightlist
\item Using one dummy for each category gives too many dummy variables!
\item The coefficients of the dummies are relative to the omitted category
\item \texttt{season()} automatically generates the dummy variables for you.
\end{itemize}
\end{textblock}

# Forecasting with transformations

## Forecasting with transformations

  * Back-transformed point forecasts are medians.
  * To get the mean, we need a bias adjustment.

\pause

Let $X$ have mean $\mu$ and variance $\sigma^2$.

Let $f(x)$ be back-transformation function, and $Y=f(X)$.

Taylor series expansion about $\mu$:
$$Y = f(X) \approx f(\mu) + (X-\mu)f'(\mu) + \frac{1}{2}(X-\mu)^2f''(\mu).$$\pause\vspace*{-0.4cm}

\begin{alertblock}{}
\centerline{$\E[Y] = \E[f(X)] \approx f(\mu) + \frac12 \sigma^2 f''(\mu)$}
\end{alertblock}

## Bias adjustment
\fontsize{13}{14}\sf\vspace*{-0.2cm}

**Box-Cox back-transformation:**
\begin{align*}
y_t &= \left\{\begin{array}{ll}
        \exp(w_t)      & \quad \lambda = 0; \\
        (\lambda W_t+1)^{1/\lambda}  & \quad \lambda \ne 0.
\end{array}\right. \\
f(x) &= \begin{cases}
                        e^x & \quad\lambda=0;\\
 (\lambda x + 1)^{1/\lambda} & \quad\lambda\ne0.
 \end{cases}\\
f''(x) &= \begin{cases}
                        e^x & \quad\lambda=0;\\
 (1-\lambda)(\lambda x + 1)^{1/\lambda-2} & \quad\lambda\ne0.
 \end{cases}
\end{align*}\pause\vspace*{-0.3cm}
\begin{alertblock}{}
\centerline{$\E[Y] \approx \begin{cases}
                        e^\mu\left[1+\frac{\sigma^2}{2}\right] & \quad\lambda=0;\\
 (\lambda \mu + 1)^{1/\lambda}\left[1+\frac{\sigma^2(1-\lambda)}{2(\lambda\mu+1)^2}\right] & \quad\lambda\ne0.
 \end{cases}$}
\end{alertblock}

# Forecasting with decompositions

## Forecasting with decompositions

\begin{block}{}
$$y_t = \hat{S}_t + \hat{A}_t$$
\vspace*{-0.5cm}\begin{itemize}\tightlist
  \item $\hat{A}_t$ is seasonally adjusted component
  \item $\hat{S}_t$ is seasonal component.
\end{itemize}
\end{block}

  *  Forecast $\hat{S}_t$ using a Seasonal Naïve method.
  *  Forecast $\hat{A}_t$ using a non-seasonal time series method.
  *  Combine forecasts of $\hat{S}_t$ and $\hat{A}_t$ to get forecasts of original data.

## Decomposition models

`decomposition_model()` creates a decomposition model

 * You must provide a method for forecasting the `season_adjust` series.
 * A seasonal naïve method is used by default for the `seasonal` components.
 * The variances from both the seasonally adjusted and seasonal forecasts are combined.
